<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:/org/springframework/beans/factory/xml/spring-beans-4.0.xsd
						http://www.springframework.org/schema/context classpath:/org/springframework/context/config/spring-context-4.0.xsd
						http://www.springframework.org/schema/rabbit classpath:/org/springframework/amqp/rabbit/config/spring-rabbit-1.6.xsd">


    <!-- ========== ConnectionFactory ==============================================================  -->

    <!--配置connection-factory，指定连接rabbit server参数 -->
    <rabbit:connection-factory id="rabbitConnectionFactory" host="10.5.52.57" port="5672" virtual-host="/test" username="guest" password="guest"  />

    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
    <rabbit:admin connection-factory="rabbitConnectionFactory"/>


    <!-- ========== Queue & Exchange ==============================================================  -->

    <!-- queue 队列声明-->
    <rabbit:queue id="queue_one" durable="true" auto-delete="false" exclusive="false" name="queue_one"/>
    <rabbit:queue id="queue_two" durable="true" auto-delete="false" exclusive="false" name="queue_two"/>



    <!--topic: exchange queue binging key 绑定 -->
    <rabbit:topic-exchange name="myexchange1"  durable="true" auto-delete="false" id="myexchange1">
        <rabbit:bindings>
            <rabbit:binding queue="queue_one" pattern="foo.*"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!--fanout: exchange queue binging key 绑定 -->
    <rabbit:fanout-exchange name="myexchange2" durable="true" auto-delete="false" id="myexchange2">
        <rabbit:bindings>
            <rabbit:binding queue="queue_two"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:fanout-exchange>

    <!--direct: exchange queue binging key 绑定 -->
    <!-- <rabbit:direct-exchange name="my-mq-exchange" durable="true" auto-delete="false" id="my-mq-exchange">
         <rabbit:bindings>
             <rabbit:binding queue="queue_one" key="queue_one_key"/>
         </rabbit:bindings>
     </rabbit:direct-exchange>-->


    <!-- ========== consumer & listener 声明 ============================================================== -->

    <!--<bean id="consumerMessageHandler" class="net.sh.rabbitmq.demo.ConsumeMessageHandler"></bean>-->

    <!-- 配置线程池 -->
    <bean id ="taskExecutor"  class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" >
        <!-- 线程池维护线程的最少数量 -->
        <property name ="corePoolSize" value ="5" />
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name ="keepAliveSeconds" value ="30000" />
        <!-- 线程池维护线程的最大数量 -->
        <property name ="maxPoolSize" value ="1000" />
        <!-- 线程池所使用的缓冲队列 -->
        <property name ="queueCapacity" value ="200" />
    </bean>

    <!-- queue listener  观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象
    <rabbit:listener-container connection-factory="rabbitConnectionFactory" acknowledge="auto" task-executor="taskExecutor">
        <rabbit:listener queues="queue_one" ref="consumerMessageHandler"/>
    </rabbit:listener-container>
    -->



    <!-- ========== spring template声明( Consumer 其实用不上，但是代码在一起，运行时需要） ============================================================== -->

    <!-- spring amqp默认的是jackson 的一个插件,目的将生产者生产的数据转换为json存入消息队列-->
    <bean id="jsonMessageConverter"  class="net.sh.rabbitmq.demo.FastJsonMessageConverter"></bean>

    <!--direct-->
    <!--<rabbit:template exchange="my-mq-exchange" id="amqpTemplate"  connection-factory="rabbitConnectionFactory" message-converter="jsonMessageConverter"/>-->

    <!--topic-->
    <rabbit:template exchange="myexchange1" id="amqpTemplate" connection-factory="rabbitConnectionFactory" message-converter="jsonMessageConverter" routing-key="foo.bar"/>

    <!--fanout-->
    <!-- <rabbit:template exchange="myexchange2" id="amqpTemplate"  connection-factory="rabbitConnectionFactory" message-converter="jsonMessageConverter"/>-->

    <rabbit:template exchange="myexchange2" id="amqpTemplate2" connection-factory="rabbitConnectionFactory" message-converter="jsonMessageConverter"
                     channel-transacted="true"/>

    <!-- ========== rabbit 事务 ============================================================== -->

    <bean id="consumerTxMessageHandler" class="net.sh.rabbitmq.demo.tx_entry.ConsumeTxMessageHandler">
        <property name="demoService" ref="demoService" />
    </bean>

    <bean id="rabbitTxManager" class="org.springframework.amqp.rabbit.transaction.RabbitTransactionManager">
        <property name="connectionFactory" ref="rabbitConnectionFactory"></property>
    </bean>

    <rabbit:listener-container connection-factory="rabbitConnectionFactory" transaction-manager="rabbitTxManager" channel-transacted="true">
        <rabbit:listener ref="consumerTxMessageHandler" method="onMessage" queue-names="queue_two"/>
    </rabbit:listener-container>


    <bean id="dummyMessageProducer" class="net.sh.rabbitmq.demo.DummyMessageProducer" />

</beans>


